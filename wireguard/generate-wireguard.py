#!/usr/bin/env python3

import argparse
import hashlib
import json
import os

DEFAULTS = {}


def make_uuid(name: str) -> str:
    md5 = hashlib.md5(name.encode()).hexdigest()
    # format: 70012c2d-4f0a-4c9c-b36b-121c60dfba68
    out = []
    for offset, length in [(0, 8), (8, 4), (12, 4), (16, 4), (20, 12)]:
        out += [md5[offset : offset + length]]

    return "-".join(out)


def extract_defaults(name: str, optstr: str):
    global DEFAULTS
    if name.endswith("---defaults"):
        name = name[: -len("---defaults")]
    else:
        print(f"Skipping entry '{name}' -> not a defaults entry")
        return

    if name in DEFAULTS:
        print(f"Skipping defaults entry '{name}' -> already defined")
        return

    print(f"Extracting defaults entry '{name}':")
    DEFAULTS[name] = {}

    for line in optstr.split("\n"):
        if line.strip() == "":
            continue

        parts = line.split("=", maxsplit=1)
        assert len(parts) == 2
        key = parts[0].strip()
        value = parts[1].strip()
        DEFAULTS[name][key] = value

    print(json.dumps(DEFAULTS[name], indent=4))


def generate_config_file(currenthostname: str, data: dict):
    name = data["Name"]
    key = data["Key"]
    address = data["Address"]
    autoconnect = data["Autoconnect"]
    hostname = data["Hostname"]
    allowedips = data["AllowedIPs"]
    dns = data["DNS"]
    dnspriority = data["DNSPriority"]

    vpntype = data["Type"]
    server = data["Server"]
    serverpubkey = data["ServerPubKey"]
    dnssearch = data["DNSSearch"]

    uuid = make_uuid(name)

    if hostname != currenthostname:
        print(f"Skipping WireGuard profile '{name}': " f"hostname mismatch '{hostname}' <> '{currenthostname}'")
        return None, None

    print(f"Generating WireGuard profile '{name}'")
    filedata = f"""[connection]
id={name}
uuid={uuid}
type=wireguard
interface-name={vpntype}-{hostname}
autoconnect={autoconnect}

[wireguard]
private-key={key}

[wireguard-peer.{serverpubkey}]
endpoint={server}
persistent-keepalive=21
allowed-ips={allowedips}

[ipv4]
address1={address}/32
dns-search={dnssearch}
method=manual
dns={dns}
dns-priority={dnspriority}

[ipv6]
addr-gen-mode=stable-privacy
dns-priority=-50
dns-search=
ip6-privacy=0
method=disabled

[proxy]
"""
    return filedata, uuid


def generate_config(name: str, optstr: str, currenthostname: str, outdir: str, suffix="", prefix=""):
    global DEFAULTS
    if name.endswith("---defaults"):
        print(f"Skipping entry '{name}' -> defaults entry")
        return None, None

    options = {
        "Name": name,
    }

    for line in optstr.split("\n"):
        if line.strip() == "":
            continue

        parts = line.split("=", maxsplit=1)
        assert len(parts) == 2
        key = parts[0].strip()
        value = parts[1].strip()
        options[key] = value

    type = options["Type"]
    defaults = DEFAULTS[type].copy()

    for key, value in defaults.items():
        if key not in options:
            options[key] = value

    filedata, uuid = generate_config_file(currenthostname, options)
    if filedata is None:
        return

    os.makedirs(outdir, exist_ok=True)
    outfile = os.path.join(outdir, f"{prefix}{uuid}{suffix}")

    with open(outfile, "w") as fp:
        fp.write(filedata)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("itemsfile", type=str, help="The JSON file containing " "the configuration items")
    parser.add_argument("--directory", "-d", type=str, help="The output directory", default="staging")
    parser.add_argument("--prefix", "-p", type=str, help="Filename prefix", default="autogenerated-")
    parser.add_argument("--suffix", "-s", type=str, help="Filename suffix", default=".conf")
    parser.add_argument("--hostname", "-H", type=str, help="Hostname to match", default=".conf")

    args = parser.parse_args()

    entries = json.load(open(args.itemsfile))
    for data in entries:
        extract_defaults(data["name"], data["notes"])

    for data in entries:
        generate_config(
            data["name"],
            data["notes"],
            currenthostname=args.hostname,
            outdir=args.directory,
            prefix=args.prefix,
            suffix=args.suffix,
        )
