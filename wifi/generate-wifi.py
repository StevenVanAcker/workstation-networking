#!/usr/bin/env python3

import os
import argparse
import json
import hashlib


def make_uuid(name: str) -> str:
    md5 = hashlib.md5(name.encode()).hexdigest()
    # format: 70012c2d-4f0a-4c9c-b36b-121c60dfba68
    out = []
    for offset, length in [(0, 8), (8, 4), (12, 4), (16, 4), (20, 12)]:
        out += [md5[offset: offset+length]]

    return "-".join(out)


def generate_config_wpa_psk(data: dict):
    name = data["Name"]
    password = data["Password"]
    autoconnect = data["Autoconnect"]
    uuid = make_uuid(name)

    print(f"Generating WPA-PSK for SSID '{name}'")
    filedata = f"""[connection]
id={name}
uuid={uuid}
type=wifi
autoconnect={autoconnect}

[wifi]
mode=infrastructure
ssid={name}

[wifi-security]
auth-alg=open
key-mgmt=wpa-psk
psk={password}

[ipv4]
method=auto

[ipv6]
addr-gen-mode=stable-privacy
method=auto
"""
    return filedata, uuid


def generate_config_wpa_eap(data: dict):
    name = data["Name"]
    username = data["Username"]
    password = data["Password"]
    autoconnect = data["Autoconnect"]
    uuid = make_uuid(name)

    print(f"Generating WPA-EAP for SSID '{name}'")

    filedata = f"""[connection]
id={name}
uuid={uuid}
type=wifi
autoconnect={autoconnect}

[wifi]
mode=infrastructure
ssid={name}

[wifi-security]
key-mgmt=wpa-eap

[802-1x]
eap=peap;
identity={username}
password={password}
phase2-auth=mschapv2

[ipv4]
method=auto

[ipv6]
addr-gen-mode=stable-privacy
method=ignore
"""
    return filedata, uuid


def generate_config(name: str, optstr: str,
                    outdir: str, suffix="", prefix=""):
    options = {
        "Name": name,
        "Type": "wpa-psk",
        "Autoconnect": "true"
    }
    for line in optstr.split("\n"):
        if line.strip() == "":
            continue

        parts = line.split("=", maxsplit=1)
        assert len(parts) == 2
        key = parts[0].strip()
        value = parts[1].strip()
        options[key] = value

    fn = {
        "wpa-psk": generate_config_wpa_psk,
        "wpa-eap": generate_config_wpa_eap
    }[options["Type"]]

    filedata, uuid = fn(options)

    os.makedirs(outdir, exist_ok=True)
    outfile = os.path.join(outdir, f"{prefix}{uuid}{suffix}")

    with open(outfile, "w") as fp:
        fp.write(filedata)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("itemsfile", type=str,
                        help="The JSON file containing "
                        "the configuration items")
    parser.add_argument("--directory", "-d", type=str,
                        help="The output directory",
                        default="staging")
    parser.add_argument("--prefix", "-p", type=str,
                        help="Filename prefix",
                        default="autogenerated-")
    parser.add_argument("--suffix", "-s", type=str,
                        help="Filename suffix",
                        default=".conf")

    args = parser.parse_args()

    entries = json.load(open(args.itemsfile))
    for data in entries:
        generate_config(data["name"], data["notes"],
                        outdir=args.directory,
                        prefix=args.prefix,
                        suffix=args.suffix)
